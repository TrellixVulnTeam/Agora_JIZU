import { InjectionToken, Injectable, Inject, Component, Input, NgModule, defineInjectable, inject } from '@angular/core';
import { Sheetload, Scriptload } from '@nowzoo/sheetload';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common/http';
import * as ɵngcc2 from '@angular/common';
const /** @type {?} */ NGX_HIGHLIGHT_JS_URL = new InjectionToken('The base url for highlight.js');
const /** @type {?} */ NGX_HIGHLIGHT_JS_DEFAULT_THEME = new InjectionToken('The default theme for highlight.js');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxHighlightJsThemeService {
    /**
     * @param {?} _defaultTheme
     * @param {?} _jsURL
     */
    constructor(_defaultTheme, _jsURL) {
        this._defaultTheme = _defaultTheme;
        this._jsURL = _jsURL;
        this._theme = 'default';
        this._initializedPromise = null;
        this._linkEl = null;
        this._theme = _defaultTheme;
    }
    /**
     * @return {?}
     */
    initialized() {
        if (!this._initializedPromise) {
            this._initializedPromise = this.loadTheme(this._theme);
        }
        return this._initializedPromise;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    loadTheme(name) {
        const /** @type {?} */ url = `${this._jsURL}/styles/${name}.min.css`;
        return Sheetload.load(url)
            .then((linkEl) => {
            if (this._linkEl) {
                this._linkEl.remove();
            }
            this._linkEl = linkEl;
            this._linkEl.removeAttribute('disabled');
        });
    }
    /**
     * @return {?}
     */
    get theme() {
        return this._theme;
    }
}
NgxHighlightJsThemeService.ɵfac = function NgxHighlightJsThemeService_Factory(t) { return new (t || NgxHighlightJsThemeService)(ɵngcc0.ɵɵinject(NGX_HIGHLIGHT_JS_DEFAULT_THEME), ɵngcc0.ɵɵinject(NGX_HIGHLIGHT_JS_URL)); };
NgxHighlightJsThemeService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxHighlightJsThemeService, factory: NgxHighlightJsThemeService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxHighlightJsThemeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_DEFAULT_THEME,] }] },
    { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
];
/** @nocollapse */ NgxHighlightJsThemeService.ngInjectableDef = defineInjectable({ factory: function NgxHighlightJsThemeService_Factory() { return new NgxHighlightJsThemeService(inject(NGX_HIGHLIGHT_JS_DEFAULT_THEME), inject(NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsThemeService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxHighlightJsThemeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [NGX_HIGHLIGHT_JS_DEFAULT_THEME]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [NGX_HIGHLIGHT_JS_URL]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxHighlightJsScriptService {
    /**
     * @param {?} _jsURL
     */
    constructor(_jsURL) {
        this._jsURL = _jsURL;
        this._hljs = null;
        this._loadedLanguages = new Map();
    }
    /**
     * @return {?}
     */
    loaded() {
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        this._loadedPromise = new Promise((resolve, reject) => {
            const /** @type {?} */ url = `${this._jsURL}/highlight.min.js`;
            Scriptload.load(url)
                .then(() => {
                setTimeout(() => {
                    this._hljs = window['hljs'];
                    resolve(this._hljs);
                }, 10);
            })
                .catch(reject);
        });
        return this._loadedPromise;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    loadLanguage(lang) {
        let /** @type {?} */ p = this._loadedLanguages.get(lang);
        if (p) {
            return p;
        }
        if (this._hljs && this._hljs.listLanguages().indexOf(lang) > -1) {
            p = Promise.resolve();
            this._loadedLanguages.set(lang, p);
            return p;
        }
        const /** @type {?} */ url = `${this._jsURL}/languages/${lang}.min.js`;
        p = this.loaded()
            .then(() => {
            return Scriptload.load(url);
        });
        this._loadedLanguages.set(lang, p);
        return p;
    }
}
NgxHighlightJsScriptService.ɵfac = function NgxHighlightJsScriptService_Factory(t) { return new (t || NgxHighlightJsScriptService)(ɵngcc0.ɵɵinject(NGX_HIGHLIGHT_JS_URL)); };
NgxHighlightJsScriptService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxHighlightJsScriptService, factory: NgxHighlightJsScriptService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxHighlightJsScriptService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [NGX_HIGHLIGHT_JS_URL,] }] }
];
/** @nocollapse */ NgxHighlightJsScriptService.ngInjectableDef = defineInjectable({ factory: function NgxHighlightJsScriptService_Factory() { return new NgxHighlightJsScriptService(inject(NGX_HIGHLIGHT_JS_URL)); }, token: NgxHighlightJsScriptService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxHighlightJsScriptService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [NGX_HIGHLIGHT_JS_URL]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxHighlightJsService {
    /**
     * @param {?} themeService
     * @param {?} scriptService
     */
    constructor(themeService, scriptService) {
        this.themeService = themeService;
        this.scriptService = scriptService;
    }
    /**
     * @return {?}
     */
    get theme() {
        return this.themeService._theme;
    }
    /**
     * @return {?}
     */
    loaded() {
        if (this._loadedPromise) {
            return this._loadedPromise;
        }
        const /** @type {?} */ promises = [this.scriptService.loaded(), this.themeService.initialized()];
        this._loadedPromise = Promise.all(promises)
            .then((results) => {
            this._hljs = results[0];
            return (this._hljs);
        });
        return this._loadedPromise;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    loadLanguage(lang) {
        return this.scriptService.loadLanguage(lang);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    loadTheme(name) {
        return this.themeService.loadTheme(name);
    }
    /**
     * @param {?} lang
     * @param {?} code
     * @return {?}
     */
    highlight(lang, code) {
        return this.loaded()
            .then(() => {
            return this.loadLanguage(lang);
        })
            .then(() => {
            const /** @type {?} */ hl = this._hljs.highlight(lang, code, true).value;
            return hl;
        });
    }
}
NgxHighlightJsService.ɵfac = function NgxHighlightJsService_Factory(t) { return new (t || NgxHighlightJsService)(ɵngcc0.ɵɵinject(NgxHighlightJsThemeService), ɵngcc0.ɵɵinject(NgxHighlightJsScriptService)); };
NgxHighlightJsService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxHighlightJsService, factory: NgxHighlightJsService.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgxHighlightJsService.ctorParameters = () => [
    { type: NgxHighlightJsThemeService },
    { type: NgxHighlightJsScriptService }
];
/** @nocollapse */ NgxHighlightJsService.ngInjectableDef = defineInjectable({ factory: function NgxHighlightJsService_Factory() { return new NgxHighlightJsService(inject(NgxHighlightJsThemeService), inject(NgxHighlightJsScriptService)); }, token: NgxHighlightJsService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxHighlightJsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: NgxHighlightJsThemeService }, { type: NgxHighlightJsScriptService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxHighlightJsComponent {
    /**
     * @param {?} service
     * @param {?} http
     */
    constructor(service, http) {
        this.service = service;
        this.http = http;
        this.highlightedHTML = '';
        this.error = null;
        this.afterInit = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.onChange();
        this.afterInit = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.afterInit) {
            this.onChange();
        }
    }
    /**
     * @return {?}
     */
    fetchText() {
        if (!this.url) {
            return Promise.resolve(this.code || '');
        }
        return new Promise((resolve, reject) => {
            this.http.get(this.url, { responseType: 'text' }).subscribe((text) => resolve(text), (err) => reject(err));
        });
    }
    /**
     * @return {?}
     */
    onChange() {
        this.error = null;
        this.isInitializing = true;
        this.fetchText()
            .then((text) => {
            return this.service.highlight(this.lang, text);
        })
            .then((hl) => {
            this.highlightedHTML = hl;
            this.isInitializing = false;
        })
            .catch(e => {
            this.error = e.toString();
            this.isInitializing = false;
        });
    }
}
NgxHighlightJsComponent.ɵfac = function NgxHighlightJsComponent_Factory(t) { return new (t || NgxHighlightJsComponent)(ɵngcc0.ɵɵdirectiveInject(NgxHighlightJsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.HttpClient)); };
NgxHighlightJsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NgxHighlightJsComponent, selectors: [["ngx-highlight-js"]], inputs: { code: "code", url: "url", lang: "lang" }, exportAs: ["ngxHighlightJs"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 2, consts: [[3, "ngClass", "innerHTML"]], template: function NgxHighlightJsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "pre");
        ɵngcc0.ɵɵelement(1, "code", 0);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", "hljs " + ctx.lang)("innerHTML", ctx.highlightedHTML, ɵngcc0.ɵɵsanitizeHtml);
    } }, directives: [ɵngcc2.NgClass], encapsulation: 2 });
/** @nocollapse */
NgxHighlightJsComponent.ctorParameters = () => [
    { type: NgxHighlightJsService },
    { type: HttpClient }
];
NgxHighlightJsComponent.propDecorators = {
    code: [{ type: Input }],
    url: [{ type: Input }],
    lang: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxHighlightJsComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-highlight-js',
                exportAs: `ngxHighlightJs`,
                template: `<pre><code
      [ngClass]="'hljs ' + lang"
      [innerHTML]="highlightedHTML"></code></pre>`
            }]
    }], function () { return [{ type: NgxHighlightJsService }, { type: ɵngcc1.HttpClient }]; }, { code: [{
            type: Input
        }], url: [{
            type: Input
        }], lang: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxHighlightJsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxHighlightJsModule,
            providers: [
                NgxHighlightJsThemeService,
                NgxHighlightJsScriptService,
                NgxHighlightJsService,
                { provide: NGX_HIGHLIGHT_JS_URL, useValue: '//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0' },
                { provide: NGX_HIGHLIGHT_JS_DEFAULT_THEME, useValue: 'default' },
            ]
        };
    }
}
NgxHighlightJsModule.ɵfac = function NgxHighlightJsModule_Factory(t) { return new (t || NgxHighlightJsModule)(); };
NgxHighlightJsModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxHighlightJsModule });
NgxHighlightJsModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            HttpClientModule
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxHighlightJsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                declarations: [NgxHighlightJsComponent],
                exports: [NgxHighlightJsComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxHighlightJsModule, { declarations: function () { return [NgxHighlightJsComponent]; }, imports: function () { return [CommonModule,
        HttpClientModule]; }, exports: function () { return [NgxHighlightJsComponent]; } }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NGX_HIGHLIGHT_JS_URL, NGX_HIGHLIGHT_JS_DEFAULT_THEME, NgxHighlightJsService, NgxHighlightJsModule, NgxHighlightJsScriptService as ɵb, NgxHighlightJsThemeService as ɵa, NgxHighlightJsComponent as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,