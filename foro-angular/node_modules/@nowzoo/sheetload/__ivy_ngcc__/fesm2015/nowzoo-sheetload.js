/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Elementload {
    /**
     * @param {?} el
     * @return {?}
     */
    static load(el) {
        const /** @type {?} */ p = new Promise((resolve, reject) => {
            const /** @type {?} */ head = Elementload.getHeadElement();
            const /** @type {?} */ onLoaded = () => {
                el.removeEventListener('load', onLoaded);
                el.removeEventListener('error', onError);
                resolve(el);
            };
            el.addEventListener('load', onLoaded);
            const /** @type {?} */ onError = (err) => {
                el.removeEventListener('load', onLoaded);
                el.removeEventListener('error', onError);
                head.removeChild(el);
                reject(err);
            };
            el.addEventListener('error', onError);
            head.appendChild(el);
        });
        return p;
    }
    /**
     * @return {?}
     */
    static getHeadElement() {
        return document.head;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Sheetload {
    /**
     * @param {?} url
     * @return {?}
     */
    static load(url) {
        const /** @type {?} */ link = document.createElement('link');
        link.setAttribute('rel', 'stylesheet');
        link.setAttribute('href', url);
        const /** @type {?} */ p = Elementload.load(link)
            .then(() => {
            link.setAttribute('disabled', 'disabled');
            return link;
        });
        return p;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Scriptload {
    /**
     * @param {?} url
     * @return {?}
     */
    static load(url) {
        const /** @type {?} */ script = document.createElement('script');
        script.setAttribute('src', url);
        const /** @type {?} */ p = /** @type {?} */ (Elementload.load(script));
        return p;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { Elementload, Sheetload, Scriptload };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm93em9vLXNoZWV0bG9hZC5qcyIsInNvdXJjZXMiOlsiQG5vd3pvby9zaGVldGxvYWQvbGliL2VsZW1lbnRsb2FkLnRzIiwiQG5vd3pvby9zaGVldGxvYWQvbGliL3NoZWV0bG9hZC50cyIsIkBub3d6b28vc2hlZXRsb2FkL2xpYi9zY3JpcHRsb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTtBQUFvQjtBQUNuQjtBQUFxQjtBQUFtQjtBQUFRLElBQS9DLE9BQU8sSUFBSSxDQUFDLEVBQWU7QUFBSSxRQUM3Qix1QkFBTSxDQUFDLEdBQXlCLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU07QUFDaEUsWUFBTSx1QkFBTSxJQUFJLEdBQW9CLFdBQVcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUNqRSxZQUFNLHVCQUFNLFFBQVEsR0FBRztBQUN2QixnQkFBUSxFQUFFLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2pELGdCQUFRLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakQsZ0JBQVEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BCLGFBQU8sQ0FBQztBQUNSLFlBQU0sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM1QyxZQUNNLHVCQUFNLE9BQU8sR0FBRyxDQUFDLEdBQUc7QUFDMUIsZ0JBQVEsRUFBRSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqRCxnQkFBUSxFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2pELGdCQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0IsZ0JBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLGFBQU8sQ0FBQztBQUNSLFlBQU0sRUFBRSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM1QyxZQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsU0FBSyxDQUFDLENBQUM7QUFDUCxRQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsS0FBRztBQUNIO0FBQVE7QUFBbUI7QUFBUSxJQUFqQyxPQUFPLGNBQWM7QUFBSyxRQUN4QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDekIsS0FBRztBQUNILENBQUM7QUFDRDtBQUFDO0FBQUk7QUFBa0M7QUFBeUM7QUMzQmhGO0FBQWtCO0FBQVE7QUFFeEI7QUFBbUI7QUFDakIsSUFBRixPQUFPLElBQUksQ0FBQyxHQUFXO0FBQUksUUFDekIsdUJBQU0sSUFBSSxHQUFvQixRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pFLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDM0MsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNuQyxRQUFJLHVCQUFNLENBQUMsR0FBNkIsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDOUQsYUFBTyxJQUFJLENBQUM7QUFDWixZQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELFlBQVEsT0FBTyxJQUFJLENBQUM7QUFDcEIsU0FBTyxDQUFDLENBQUM7QUFDVCxRQUFJLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsS0FBRztBQUNILENBQUM7QUFDRDtBQUFDO0FBQUk7QUFBa0M7QUFBeUM7QUNkaEY7QUFBbUI7QUFBUTtBQUV4QjtBQUFtQjtBQUNsQixJQUFGLE9BQU8sSUFBSSxDQUFDLEdBQVc7QUFBSSxRQUN6Qix1QkFBTSxNQUFNLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkUsUUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQyxRQUFJLHVCQUFNLENBQUMscUJBQStCLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUErQixDQUFBLENBQUM7QUFDakcsUUFBSSxPQUFPLENBQUMsQ0FBQztBQUNiLEtBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFBQztBQUFJO0FBQWtDO0FBQXlDO0FBQUk7QUFBQztBQUFJO0FBQWtDO0FBQXlDO0FBQUk7QUFBQzs7QUZWQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUMxQkEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUNiQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBjbGFzcyBFbGVtZW50bG9hZCB7XG4gIHN0YXRpYyBsb2FkKGVsOiBIVE1MRWxlbWVudCk6IFByb21pc2U8SFRNTEVsZW1lbnQ+IHtcbiAgICBjb25zdCBwOiBQcm9taXNlPEhUTUxFbGVtZW50PiA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGhlYWQ6IEhUTUxIZWFkRWxlbWVudCA9IEVsZW1lbnRsb2FkLmdldEhlYWRFbGVtZW50KCk7XG4gICAgICBjb25zdCBvbkxvYWRlZCA9ICgpID0+IHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZGVkKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgcmVzb2x2ZShlbCk7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZGVkKTtcblxuICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uTG9hZGVkKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgaGVhZC5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKGVsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBzdGF0aWMgZ2V0SGVhZEVsZW1lbnQoKTogSFRNTEhlYWRFbGVtZW50IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuaGVhZDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRWxlbWVudGxvYWQgfSBmcm9tICcuL2VsZW1lbnRsb2FkJztcblxuZXhwb3J0IGNsYXNzIFNoZWV0bG9hZCB7XG4gIHN0YXRpYyBsb2FkKHVybDogc3RyaW5nKTogUHJvbWlzZTxIVE1MTGlua0VsZW1lbnQ+IHtcbiAgICBjb25zdCBsaW5rOiBIVE1MTGlua0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpO1xuICAgIGNvbnN0IHA6IFByb21pc2U8SFRNTExpbmtFbGVtZW50PiA9IEVsZW1lbnRsb2FkLmxvYWQobGluaylcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJyk7XG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIHA7XG4gIH1cbn1cbiIsIlxuaW1wb3J0IHsgRWxlbWVudGxvYWQgfSBmcm9tICcuL2VsZW1lbnRsb2FkJztcblxuZXhwb3J0IGNsYXNzIFNjcmlwdGxvYWQge1xuICBzdGF0aWMgbG9hZCh1cmw6IHN0cmluZyk6IFByb21pc2U8SFRNTFNjcmlwdEVsZW1lbnQ+IHtcbiAgICBjb25zdCBzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnc3JjJywgdXJsKTtcbiAgICBjb25zdCBwOiBQcm9taXNlPEhUTUxTY3JpcHRFbGVtZW50PiA9IEVsZW1lbnRsb2FkLmxvYWQoc2NyaXB0KSBhcyBQcm9taXNlPEhUTUxTY3JpcHRFbGVtZW50PjtcbiAgICByZXR1cm4gcDtcbiAgfVxufVxuIl19